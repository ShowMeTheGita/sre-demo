# # Overview
# 
# Imports a dashboard to Grafana using the API with basic authentication
# The dashboard json file must exist in the 'dashboards' folder
# The dashboard json must be correctly modified to be allowed as POST data
# Retrieves all Grafana datasources, filters them by name using the jq utility, and attaches uid to dashboard json
# Datasource must have already been created
# Prometheus blackbox and prometheus node exporter community dashboards json have already been added and modified for import 
#
# # Playbook parameters
#
# dashboard | string                            : Dashboard json file name
# ds_name   | string | default('PrometheusDS')  : Datasource to be attached to dashboard 
# 
# # Examples
#
# Import the node exporter community dashboard using the default PrometheusDS datasource
# ansible-playbook import_dashboard.yml -e dashboard=node-exporter-full_rev31.json
#
# Import the blackbox exporter community dashboard using a different datasource name
# ansible-playbook import_dashboard.yml -e dashboard=prometheus-blackbox-exporter_rev3.json -e ds_name=MyDatasourceName
#

---
- name: Import custom community dashboard to grafana
  hosts: ansible

  vars:
    grafana_creds: "admin:admin" # Don't do this. Use the ansible-vault functionality to store credentials, either with user:pass or a grafana API key
    grafana_server: "grafana:3000"
    ds_api_endpoint: "api/datasources"
    import_dashboard_api_endpoint: "api/dashboards/import" 
    dashboard_file: "./dashboards/{{ dashboard }}" # If this is a community dashboard json, it must first be modified in order to be accepted via POST
    datasource_name: "{{ ds_name | default('PrometheusDS')}}"

  tasks:

    - name: Check if required variables are set
      fail:
        msg: "Required variable 'dashboard_file' is not set. Must specify path to dashboard json file"
      when: dashboard is not defined

    - name: Get all available grafana datasources
      uri:
        url: "http://{{ grafana_creds }}@{{ grafana_server }}/{{ ds_api_endpoint }}"
        method: "GET"
        force_basic_auth: true
        return_content: true
        dest: ./grafana_datasources.json
        owner: ansible
        group: orcha
        status_code: 200
      register: datasources

    - name: Retrieve specific datasource uid
      shell: "/bin/cat ./grafana_datasources.json | jq '.[] | select (.name == \"{{ datasource_name }}\").uid'"
      register: datasource_uid_raw

    - name: Cleanup datasource uid string format
      shell: "/bin/echo {{ datasource_uid_raw.stdout }}"
      register: datasource_uid 

    - name: "Change value of datasource uid on dashboard json to uid of datasource [{{ datasource_name }}] and create an updated dashboard json file"
      shell: "jq '.inputs[0].value = \"{{ datasource_uid.stdout }}\"' {{ dashboard_file }} > updated_dashboard.json"

    - name: Import dashboard to Grafana
      uri:
        url: "http://{{ grafana_creds }}@{{ grafana_server }}/{{ import_dashboard_api_endpoint }}"
        method: "POST"
        force_basic_auth: true
        src: ./updated_dashboard.json
        body_format: json
        headers: 
          Accept: application/json
          Content-Type: application/json
        status_code: 200

    - name: Cleanup updated dashboard file
      file:
        path: "./updated_dashboard.json"
        state: absent

    - name: Cleanup temporary datasources json
      file:
        path: "./grafana_datasources.json"
        state: absent 

    - name: Output details
      debug:
        msg: 
          - "Dashboard [{{ dashboard }}] successfully imported and attached to datasource [{{ datasource_name }}]!"
          - "Look for the dashboard over at http://localhost:3000 on the 'Dashboards' tab"
...