# # Overview
#
# Performs different stress tests on target hosts
# The stress test results will be caught by the node exporter service assuming it is running and displayed on Grafana dashboards assuming they're configured
# Able to stress [cpu, ram, io, network]
# Uses 'iperf' utility to stress network and 'stress' utility for all others
# Pauses the playbook for the seconds of the stress test, printing out a small stress summary during pause
#
# Since docker containers share host resources, targetting only one container will cause all others to spike
# For the above reasons it's recommended to only target ansible for the sake of simplicity
#
# # Playbook Parameters
#
# cpu         | bool    | default(false)            : Defines if CPU should be stressed
# ram         | bool    | default(false)            : Defines if RAM should be stressed
# io          | bool    | default(false)            : Defines if I/O should be stressed
# network     | bool    | default(false)            : Defines if network should be stressed
# seconds     | int     | default(10)               : Seconds to run stress test for
# ram_mem     | string  | default('2G')             : Amount of ram memory to use for stressing
# num_workers | int     | default(4)                : Number of workers to be used for I/O stressing
# num_cpus    | int     | default(MAX_NUM_OF_CORES) : Defines the number of CPUs to stress
#
# Examples
#
# Stress every possible component with default stress values
# ansible-playbook stress_test.yml -e target_hosts=ansible -e cpu=true -e ram=true -e io=true -e network=true
#
# Stress network for one minute
# ansible-playbook stress_test.yml -e target_hosts=ansible -e seconds=60 -e network=true
#
# Stress one CPU core for 10 seconds
# ansible-playbook stress_test.yml -e target_hosts=ansible -e cpu=true -e num_cpus=1
#

--- 
- name: Stress test containers
  hosts: "{{ target_hosts }}"

  vars:
    stress_cpu:       "{{ cpu      | default(false) }}"
    stress_ram:       "{{ ram      | default(false) }}"
    stress_io:        "{{ io       | default(false) }}"
    stress_network:   "{{ network  | default(false) }}"
    timeout:          "{{ seconds  | default(10)    }}"

    # RAM stress default args
    bytes_per_vm_worker: "{{ ram_mem | default('2G') }}"
    # I/O stress default args
    workers: "{{ num_workers | default(4) }}"


  tasks:

    - name: Include CPU stress tasks
      include_tasks: ./tasks/stress_cpu.yml
      when: stress_cpu is defined and stress_cpu | bool

    - name: Include RAM stress tasks
      include_tasks: ./tasks/stress_ram.yml
      when: stress_ram is defined and stress_ram | bool

    - name: Include I/O stress tasks
      include_tasks: ./tasks/stress_io.yml
      when: stress_io is defined and stress_io | bool  

    - name: Include Network stress tasks
      include_tasks: ./tasks/stress_network.yml
      when: stress_network is defined and stress_network | bool

    - name: Wait for stress test to finish
      pause:
        seconds: "{{ timeout }}"
        prompt: "\n
                Stressing for [{{ timeout }}] seconds using:\n
                {{ '(-)' if stress_cpu | bool }} {{ num_cores if stress_cpu | bool }} {{ 'CPU cores\n' if stress_cpu | bool }}
                {{ '(-) RAM with' if stress_ram | bool }} {{ bytes_per_vm_worker if stress_ram | bool }}{{ '\n' if stress_ram | bool }}
                {{ '(-) I/O with' if stress_io | bool }} {{ workers if stress_io | bool }} {{ 'workers spinning on sync()\n' if stress_io | bool }}
                {{ '(-) Network using iperf tool\n' if stress_network | bool }}
                \n"

    - name: Kill iperf
      shell: "kill -9 $(pidof iperf)"
      when: stress_network is defined and stress_network | bool
...